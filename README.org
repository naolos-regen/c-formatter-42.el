* c-formatter-42.el

I'm (currently) not a 42 student, but I love the C style.

It's not in the Elpa, Melpa or any other package manager, because it's just 1 file
all credits to cacharlie's c_formatter_42 for vim
https://github.com/cacharle/c_formatter_42.vim
(I just translated it to emacs lisp)
The c_formatter_42 itself
https://github.com/dawnbeen/c_formatter_42
& 42school's norminette
https://github.com/42School/norminette


** How to use?
*** 1. Install c_formatter_42 / norminette

[[https://github.com/dawnbeen/c_formatter_42][c_formatter_42]] <- here is the link
[[https://github.com/42School/norminette][norminette]]     <- here is the link

If the installation via pip3 does not work, set up a venv using pipx like this one:
#+BEGIN_SRC
  ># apt    install pipx            # debian
  ># dnf    install pipx            # fedora
  ># pacman -S      python-pipx     # arch

  >$ brew   install pipx            # macOS

C:/ python3 -m pip install --user pipx # other
#+END_SRC

Ensure your path is set up properly ($HOME/.local/bin is default)
#+BEGIN_SRC bash
  >$ pipx ensurepath
  >$ pipx install c_formatter_42
  >$ pipx install norminette     # <- additionally
#+END_SRC

To use it, you need to make sure that $PATH is set up properly.
#+BEGIN_SRC bash
  >$ echo 'export PATH=$HOME/.local/bin:$PATH' >> ~/.bashrc
  # or ~/.zshrc

  # for fish (not sure)
  >$ fish_add_path path ...
  >$ fish_add_path [(-g | --global) | (-U | --universal) | (-P | --path)] [(-m | --move)] [(-a | --append) | (-p | --prepend)] [(-v | --verbose) | (-n | --dry-run)] PATHS ...

#+END_SRC
Afterwards you need to source .zshrc or .bashrc


*** 2.Setting up the c-formatter-42.el file

#+BEGIN_SRC emacs-lisp
  ; loading path to .el file
  (add-to-list 'load-path "$PATH_TO_FILE")
  ; make sure it's loaded within your emacs config
  (require 'c-formatter-42)
  ; all-possible setq's
  (setq c-formatter-42-exec "$PATH_TO_C_FORMATTER_42") ; default c_formatter_42 (if $PATH not set)
  (setq c-formatter-42-format-on-save 1)               ; default 0
  (setq norminette-command  "$PATH_TO_NORMINETTE")     ; default norminette
  ; keybinding setq's
  (setq norminette-keybinding     "C-c C-n")           ; default <f4>
  (setq c-formatter-42-keybinding "C-c C-f")           ; default <f2>
#+END_SRC

*** 3. Make sure your $PATH is setup correctly within emacs
You can either use exec-path-from-shell package for GUI emacs (I prefer this)
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :if (display-graphic-p)
    :config
    (exec-path-from-shell-initialize))
#+END_SRC
Or append it manually within emacs configs
#+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat (getenv "PATH") ":" (expand-file-name "$HOME/$PATH_TO_EXECS")))
  (add-to-list 'exec-path (expand-file-name "$HOME/$PATH_TO_EXECS"))
#+END_SRC
To check use M-x executable-find "c_formatter_42"
*** 4. Make sure your lsp/c-mode is not messing up with you

Whenever you use ccls package with ccls it will use it's formatter for you, also default c-mode engages GNU-style.

#+BEGIN_SRC emacs-lisp
  ;; Lets say this is your conf
  (use-package ccls
      :ensure t
      :hook ((c-mode c++-mode objc-mode) . lsp)
      :config
      (setq ccls-executable "ccls"))
  ;; What you want to do in
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-clients-ccls-initialization-options
  	 '(:index (:comments 2)
  		   :completion (:disabledLabel t)
  		   :clang      (:extraAtgs     ["-Wall" "-Wextra" "-Werror"])))
    (setq lsp-keymap-prefix "C-c l")
    :hook (
  	  (c-mode    . lsp)
  	  (c++-mode  . lsp)
  	  )
    :config
    (lsp-enable-which-key-integration t))

  (setq lsp-enable-on-type-formatting   nil)
  (setq lsp-enable-indentation          nil)
  (setq lsp-enable-formatting 		nil)
#+END_SRC

add little spice

#+BEGIN_SRC emacs-lisp
  (defun disable-c-indentation ()
    (setq-local indent-tabs-mode t)
    (setq-local tab-width 8)
    (setq-local c-basic-offset 8)
    (setq-local electric-indent-inhibit t)
    (setq-local indent-line-function 'indent-relative))

  (add-hook 'c-mode-hook   'disable-c-indentation)
  (add-hook 'c++-mode-hook 'disable-c-indentation)
#+END_SRC

Other mode's would be simpc-mode made by Tscoding [[https://github.com/rexim/simpc-mode][simpc-mode link]]
